#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sample")]
public partial class sampleDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  #endregion
	
	public sampleDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SampleConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public sampleDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public sampleDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public sampleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public sampleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Permanent", Type=typeof(PermanentEmployee), IsDefault=true)]
[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Contract", Type=typeof(ContractEmployee))]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EmployeeID;
	
	private string _Name;
	
	private string _Gender;
	
	private string _Discriminator;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    #endregion
	
	public Employee()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(MAX)")]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="VarChar(MAX)", IsDiscriminator=true)]
	public string Discriminator
	{
		get
		{
			return this._Discriminator;
		}
		set
		{
			if ((this._Discriminator != value))
			{
				this.OnDiscriminatorChanging(value);
				this.SendPropertyChanging();
				this._Discriminator = value;
				this.SendPropertyChanged("Discriminator");
				this.OnDiscriminatorChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class PermanentEmployee : Employee
{
	
	private System.Nullable<int> _Annual_Salary;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnnual_SalaryChanging(System.Nullable<int> value);
    partial void OnAnnual_SalaryChanged();
    #endregion
	
	public PermanentEmployee()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Annual Salary]", Storage="_Annual_Salary", DbType="Int")]
	public System.Nullable<int> Annual_Salary
	{
		get
		{
			return this._Annual_Salary;
		}
		set
		{
			if ((this._Annual_Salary != value))
			{
				this.OnAnnual_SalaryChanging(value);
				this.SendPropertyChanging();
				this._Annual_Salary = value;
				this.SendPropertyChanged("Annual_Salary");
				this.OnAnnual_SalaryChanged();
			}
		}
	}
}

public partial class ContractEmployee : Employee
{
	
	private System.Nullable<int> _HourlyPay;
	
	private string _HoursWorked;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHourlyPayChanging(System.Nullable<int> value);
    partial void OnHourlyPayChanged();
    partial void OnHoursWorkedChanging(string value);
    partial void OnHoursWorkedChanged();
    #endregion
	
	public ContractEmployee()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyPay", DbType="Int")]
	public System.Nullable<int> HourlyPay
	{
		get
		{
			return this._HourlyPay;
		}
		set
		{
			if ((this._HourlyPay != value))
			{
				this.OnHourlyPayChanging(value);
				this.SendPropertyChanging();
				this._HourlyPay = value;
				this.SendPropertyChanged("HourlyPay");
				this.OnHourlyPayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoursWorked", DbType="VarChar(255)")]
	public string HoursWorked
	{
		get
		{
			return this._HoursWorked;
		}
		set
		{
			if ((this._HoursWorked != value))
			{
				this.OnHoursWorkedChanging(value);
				this.SendPropertyChanging();
				this._HoursWorked = value;
				this.SendPropertyChanged("HoursWorked");
				this.OnHoursWorkedChanged();
			}
		}
	}
}

public partial class Inheritance_default : Employee
{
	
	private string _Property1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProperty1Changing(string value);
    partial void OnProperty1Changed();
    #endregion
	
	public Inheritance_default()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property1", CanBeNull=false)]
	public string Property1
	{
		get
		{
			return this._Property1;
		}
		set
		{
			if ((this._Property1 != value))
			{
				this.OnProperty1Changing(value);
				this.SendPropertyChanging();
				this._Property1 = value;
				this.SendPropertyChanged("Property1");
				this.OnProperty1Changed();
			}
		}
	}
}
#pragma warning restore 1591
